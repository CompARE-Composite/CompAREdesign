#-------------------------------------------------------------------------------
data <- data %>% mutate(d_simptomes=if_else(record_id==110, as.Date('2021-07-10'),d_simptomes),
d_simptomes=if_else(record_id==135, as.Date('2021-07-24'),d_simptomes),
d_simptomes=if_else(record_id==15,  as.Date('2021-06-30'),d_simptomes),
d_infect=if_else(record_id==378,    as.Date('2021-10-14'),d_infect),
d_contacto_maximo=if_else(record_id %in% c(24,27,37,59,71),
d_simptomes,
d_contacto_maximo),
d_infeccion_aprox_maximo=if_else(record_id==161,
as.Date('2021-07-24'),
d_infeccion_aprox_maximo),
d_infeccion_aprox_maximo=if_else(record_id %in% c(28,32,49,113,136,161,163),
d_simptomes,
d_infeccion_aprox_maximo))
##-- Calculate Minimum infection date
#-------------------------------------------------------------------------------
data <- data %>% mutate(d_infection_min = ifelse(!is.na(d_infect),d_infect,
ifelse(!is.na(d_contacto_minimo),d_contacto_minimo,                                                                      ifelse(!is.na(d_infeccion_aprox_minimo),d_infeccion_aprox_minimo,NA))))
data$d_infection_min <- as.Date(data$d_infection_min,origin='1970-01-01')
##-- Calculate Maximum infection date
#-------------------------------------------------------------------------------
data <- data %>% mutate(d_infection_max = ifelse(!is.na(d_infect),d_infect,
ifelse(!is.na(d_contacto_maximo),d_contacto_maximo,                                                                      ifelse(!is.na(d_infeccion_aprox_maximo),d_infeccion_aprox_maximo,NA))))
data$d_infection_max <- as.Date(data$d_infection_max,origin='1970-01-01')
##-- Availability of min and max dates for categories contact ans approx
#-------------------------------------------------------------------------------
# Subsets for each of these categories
d_contact <- data %>% filter(infection_type=='Contact date')
d_approx  <- data %>% filter(infection_type=='Approximate date')
# Table of frequencies
t_contact <- with(d_contact,table(factor(!is.na(d_infection_min),levels=c('FALSE','TRUE')),
factor(!is.na(d_infection_max),levels=c('FALSE','TRUE'))))
t_approx  <- with(d_approx ,table(factor(!is.na(d_infection_min),levels=c('FALSE','TRUE')),
factor(!is.na(d_infection_max),levels=c('FALSE','TRUE'))))
# Table of percentges
pt_contact <- formatC(100*prop.table(t_contact),format='f',digits=1)
pt_approx  <- formatC(100*prop.table(t_approx) ,format='f',digits=1)
# Paste tables of frequencies and percentages
tt_contact <- paste0(t_contact,' (',pt_contact,'%)')
tt_approx  <- paste0(t_approx ,' (',pt_approx ,'%)')
# Names
names(tt_contact) <- names(tt_approx) <- c('no_min_no_max','only_min','only_max','min_and_max')
df_contact_info <- as.data.frame(cbind(data.frame(type=c('Contact date','Approximate date')),
rbind(tt_contact,tt_approx)))
kable(df_contact_info,format='html',align='lrrrr',row.names = FALSE,
col.names = c('Type','Min. and Max. dates unknown','Only Min. date known','Only Max. date known','Min. and Max. dates known')) %>%
kable_styling(full_width = F)
data <- data %>% mutate(case = case_when(!is.na(d_infection_min)  & !is.na(d_infection_max) & d_infection_min==d_infection_max ~ 1,
!is.na(d_infection_min)  & !is.na(d_infection_max) & d_infection_min!=d_infection_max ~ 2,
is.na(d_infection_min)  & !is.na(d_infection_max)                                    ~ 3,
# !is.na(d_infection_min)  &  is.na(d_infection_max)                                  ~ 4, # --> No cases
is.na(d_infection_min)  &  is.na(d_infection_max)                                    ~ 5,
TRUE ~ 6))
t_case  <- table(data$case)
df_case <- tibble(Case=paste('Case',c('I','II','III','IV')),
n=as.numeric(t_case),
percentage=paste0(formatC(100*prop.table(t_case),format='f',digits = 1),' %'))
kable(df_case,align='lrr') %>%
kable_styling(full_width = F)
# kable(t(table(data$case)),col.names = paste0('Case ',c('I','II','III','IV'))) %>% kable_styling(full_width = F)
table(data$case)
##-- Set seed
set.seed(12345)
##-- Knitr global options
knitr::opts_chunk$set(echo = FALSE)
##-- Load libraries
library(compareGroups)
library(dplyr)
library(knitr)
library(summarytools)
library(kableExtra)
library(ggplot2)
library(scales)
library(readxl)
library(survival)
library(xtable)
library(numDeriv)
library(maxLik)
library(janitor)
##-- Load data
load("../../data/incubation_data_08092022.RData")
source("parameters.R")
source("functions.R")
incdat <- d %>%
rename(id = record_id,
vax1 = vaccine_1, vax2 = vaccine_2,
dinfmin = d_infection_min, dinfmax = d_infection_max,
dsymp = d_symptoms) %>%
mutate(case = factor(case_when(
dinfmin == dinfmax ~ "Case I",
complete.cases(dinfmin, dinfmax) ~ "Case II",
complete.cases(dinfmax) ~ "Case III",
is.na(dinfmax) ~ "Case IV")),
left = ifelse(case %in% c("Case I", "Case II", "Case III"),
as.vector(difftime(dsymp, dinfmax, unit = "days")), imax),
right = ifelse(case %in% c("Case I", "Case III", "Case IV"),
NA, as.vector(difftime(dsymp, dinfmin, unit = "days"))),
cens = ifelse(case == "Case I", 1,
ifelse(case == "Case II", 3,
ifelse(case == "Case III", 0, 2))),
vaxstat = factor(case_when(
vaccine == "No" ~ "Not complete",
vax1 == "Janssen" | complete.cases(vax2) ~ "Complete",
is.na(vaccine) ~ NA_character_,
TRUE ~ "Not complete"),levels=c('Not complete','Complete')),
vaxtype = factor(case_when(
vaccine == "No" ~ "No",
vax1 == "Janssen" | vax1 == "Astrazeneca" ~ "Adenovirus",
vax1 == "Moderna" | vax1 == "Pfizzer" ~ "mRNA",
is.na(vaccine) ~ NA_character_,
TRUE ~ NA_character_),levels=c('No','Adenovirus','mRNA'))) %>%
select(id:vaccine, vaxstat, everything())
Hmisc::label(incdat$age)      <- "Age"
Hmisc::label(incdat$sex)      <- "Sex"
Hmisc::label(incdat$vaccine)  <- "Vaccination"
Hmisc::label(incdat$vaxstat)  <- "Vaccination status"
Hmisc::label(incdat$vaxtype)  <- "Vaccination type"
Hmisc::label(incdat$vax1)     <- "First vaccination"
Hmisc::label(incdat$vax2)     <- "Second vaccination"
# Don't add labels because some code does not work with labelled dates
# Hmisc::label(incdat$dinfmin)  <- "Lower limit of exposure date"
# Hmisc::label(incdat$dinfmax)  <- "Upper limit of exposure date"
# Hmisc::label(incdat$dsymp)    <- "Date of Covid-19 symptoms onset"
enne <- nrow(incdat)
cases <- table(incdat$case)
incong1 <- subset(incdat[, c("id", "dinfmin", "dinfmax", "dsymp")],
dsymp < dinfmin)
incong2 <- subset(incdat[, c("id", "dinfmin", "dinfmax", "dsymp")],
(is.na(dinfmin) | dsymp >= dinfmin) & dsymp < dinfmax)
incong3 <- subset(incdat[, c("id", "dinfmin", "dinfmax", "dsymp")],
dsymp == dinfmin)
incong4 <- subset(incdat[, c("id", "dinfmin", "dinfmax", "dsymp","case","left","right")],
right>imax | left>imax)
kable(incong3, format='latex',booktabs=TRUE,row.names = FALSE, linesep = c("")) %>%
kable_styling(latex_options =c('HOLD_position','striped'))
kable(incong4, format='latex',booktabs=TRUE,row.names = FALSE, linesep = c("")) %>%
kable_styling(latex_options =c('HOLD_position','striped'))
## Without 14 --> UPC
incdat <- incdat %>%
select(id,case,dinfmin,dinfmax,dsymp,sex,age,vaccine,vaxstat,vaxtype,vax1,time_infec_to_survey) %>%
mutate(dinfmin=if_else(is.na(dinfmin), dsymp-imax, pmax(dinfmin,dsymp-imax))) %>%
mutate(dinfmax=if_else(is.na(dinfmax), dsymp, pmax(dinfmax,dsymp-imax))) %>%
mutate(elegibility=ifelse(case!='Case IV' &
!(case=='Case III' & dinfmax==dsymp) &
!(case=='Case II'  & dsymp-dinfmin==imax &
dsymp-dinfmax==0 & !is.na(dinfmin)),'Included','Excluded'))
# To know vaccinates --> add vax2 and do the table
# incdat <- incdat %>%
#        select(id,case,dinfmin,dinfmax,dsymp,sex,age,vaccine,vaxstat,vaxtype,vax1,vax2) %>%
#        mutate(dinfmin=if_else(is.na(dinfmin), dsymp-imax, pmax(dinfmin,dsymp-imax))) %>%
#        mutate(dinfmax=if_else(is.na(dinfmax), dsymp, pmax(dinfmax,dsymp-imax))) %>%
#        mutate(elegibility=ifelse(case!='Case IV' &
#                                  !(case=='Case III' & dinfmax==dsymp) &
#                                  !(case=='Case II'  & dsymp-dinfmin==imax &
#                                      dsymp-dinfmax==0 & !is.na(dinfmin)),'Included','Excluded'))
# with(incdat[incdat$elegibility=='Included',],table(vax1,vax2,useNA = 'alw'))
## With 14 --> MDACC
# incdat <- incdat %>%
#        select(id,case,dinfmin,dinfmax,dsymp,sex,age,vaccine,vaxstat,vaxtype,vax1) %>%
#        mutate(dinfmin=if_else(is.na(dinfmin), dsymp-imax, pmax(dinfmin,dsymp-imax))) %>%
#        mutate(dinfmax=if_else(is.na(dinfmax), dsymp, pmax(dinfmax,dsymp-imax))) %>%
#        mutate(elegibility=ifelse(case!='Case IV','Included','Excluded'))
dd0 <- incdat %>% filter(elegibility=='Included')
table(incdat$case)
table(dd0$Included)
table(dd0$case)
incdat <- incdat %>%
mutate(age_cat =cut(age,breaks=c(0,40,60,70,100),
include.lowest=TRUE,
labels=c('<=40','41-60','61-70','>=71')),
age_categorized=cut(age,breaks=c(0,17,29,39,49,64,74,84,100),
include.lowest=TRUE,
labels=paste(c('0-17','18-29','30-39',
'40-49','50-64','65-74',
'75-84','>85'),'years')))
class(incdat$vax1) <- "factor"
vaccineTable <- incdat %>%
filter(elegibility=="Included") %>%
tabyl(age_cat,vax1,show_na=FALSE) %>%
adorn_totals( where = c("row", "col") ) %>%
adorn_percentages("row") %>%
adorn_pct_formatting() %>%
adorn_ns( position = "front" ) %>%
adorn_title("combined")
vaccineTable %>%
kable() %>%
kable_styling(bootstrap_options = c("condensed", "striped", "bordered"))
table(dd0$incdat)
table(dd0$case)
res <- compareGroups(elegibility ~ age + age_categorized + sex + vaccine + vaxstat + vaxtype + vax1, data = incdat)
res_tab <- createTable(res,show.p.overall = FALSE)
export2md(res_tab)
# export2word(res_tab)
# export2latex(res_tab)
# export2pdf(res_tab)
with(incdat,tapply(time_infec_to_survey,elegibility,summary))
# r=t2event
# d=t_exp
t2event <- as.numeric(difftime(dd0$dsymp, dd0$dinfmax, units = "days"))
t_exp <- as.numeric(difftime(dd0$dinfmax, dd0$dinfmin, units = "days"))
##-- Ading 0.5 days artificially to cases with 0: dataset %>% filter(t2event==0 & t_exp==0) o dd0 %>% filter(id %in% c(29,76,161))
#-------------------------------------------------------------------------------
t_exp <- ifelse(t_exp==0 & t2event==0,0.5,t_exp)
# dd0$case[t_exp==0.5] <- 'Case III'
##-- Dataset to fit the models
dataset=data.frame(t2event=t2event, t_exp=t_exp, case=dd0$case,sex = dd0$sex,age = scale(dd0$age),
vaccine=dd0$vaccine, vaxstat=dd0$vaxstat, vaxtype=dd0$vaxtype)
################################################################################
# Patients with exact date
################################################################################
sel <- dd0$case=='Case I'
dataset=data.frame(t2event=t2event, t_exp=t_exp, case=dd0$case,
sex = dd0$sex,age=scale(dd0$age),vaccine=dd0$vaccine,
vaxstat=dd0$vaxstat, vaxtype=dd0$vaxtype)[sel,]
################################################################################
dim(dataset)
##-- Set seed
set.seed(12345)
##-- Knitr global options
knitr::opts_chunk$set(echo = FALSE)
##-- Load libraries
library(compareGroups)
library(dplyr)
library(knitr)
library(summarytools)
library(kableExtra)
library(ggplot2)
library(scales)
library(readxl)
library(survival)
library(xtable)
library(numDeriv)
library(maxLik)
library(janitor)
##-- Load data
load("../../data/incubation_data_08092022.RData")
source("parameters.R")
source("functions.R")
incdat <- d %>%
rename(id = record_id,
vax1 = vaccine_1, vax2 = vaccine_2,
dinfmin = d_infection_min, dinfmax = d_infection_max,
dsymp = d_symptoms) %>%
mutate(case = factor(case_when(
dinfmin == dinfmax ~ "Case I",
complete.cases(dinfmin, dinfmax) ~ "Case II",
complete.cases(dinfmax) ~ "Case III",
is.na(dinfmax) ~ "Case IV")),
left = ifelse(case %in% c("Case I", "Case II", "Case III"),
as.vector(difftime(dsymp, dinfmax, unit = "days")), imax),
right = ifelse(case %in% c("Case I", "Case III", "Case IV"),
NA, as.vector(difftime(dsymp, dinfmin, unit = "days"))),
cens = ifelse(case == "Case I", 1,
ifelse(case == "Case II", 3,
ifelse(case == "Case III", 0, 2))),
vaxstat = factor(case_when(
vaccine == "No" ~ "Not complete",
vax1 == "Janssen" | complete.cases(vax2) ~ "Complete",
is.na(vaccine) ~ NA_character_,
TRUE ~ "Not complete"),levels=c('Not complete','Complete')),
vaxtype = factor(case_when(
vaccine == "No" ~ "No",
vax1 == "Janssen" | vax1 == "Astrazeneca" ~ "Adenovirus",
vax1 == "Moderna" | vax1 == "Pfizzer" ~ "mRNA",
is.na(vaccine) ~ NA_character_,
TRUE ~ NA_character_),levels=c('No','Adenovirus','mRNA'))) %>%
select(id:vaccine, vaxstat, everything())
Hmisc::label(incdat$age)      <- "Age"
Hmisc::label(incdat$sex)      <- "Sex"
Hmisc::label(incdat$vaccine)  <- "Vaccination"
Hmisc::label(incdat$vaxstat)  <- "Vaccination status"
Hmisc::label(incdat$vaxtype)  <- "Vaccination type"
Hmisc::label(incdat$vax1)     <- "First vaccination"
Hmisc::label(incdat$vax2)     <- "Second vaccination"
# Don't add labels because some code does not work with labelled dates
# Hmisc::label(incdat$dinfmin)  <- "Lower limit of exposure date"
# Hmisc::label(incdat$dinfmax)  <- "Upper limit of exposure date"
# Hmisc::label(incdat$dsymp)    <- "Date of Covid-19 symptoms onset"
enne <- nrow(incdat)
cases <- table(incdat$case)
incong1 <- subset(incdat[, c("id", "dinfmin", "dinfmax", "dsymp")],
dsymp < dinfmin)
incong2 <- subset(incdat[, c("id", "dinfmin", "dinfmax", "dsymp")],
(is.na(dinfmin) | dsymp >= dinfmin) & dsymp < dinfmax)
incong3 <- subset(incdat[, c("id", "dinfmin", "dinfmax", "dsymp")],
dsymp == dinfmin)
incong4 <- subset(incdat[, c("id", "dinfmin", "dinfmax", "dsymp","case","left","right")],
right>imax | left>imax)
kable(incong3, format='latex',booktabs=TRUE,row.names = FALSE, linesep = c("")) %>%
kable_styling(latex_options =c('HOLD_position','striped'))
kable(incong4, format='latex',booktabs=TRUE,row.names = FALSE, linesep = c("")) %>%
kable_styling(latex_options =c('HOLD_position','striped'))
## Without 14 --> UPC
incdat <- incdat %>%
select(id,case,dinfmin,dinfmax,dsymp,sex,age,vaccine,vaxstat,vaxtype,vax1,time_infec_to_survey) %>%
mutate(dinfmin=if_else(is.na(dinfmin), dsymp-imax, pmax(dinfmin,dsymp-imax))) %>%
mutate(dinfmax=if_else(is.na(dinfmax), dsymp, pmax(dinfmax,dsymp-imax))) %>%
mutate(elegibility=ifelse(case!='Case IV' &
!(case=='Case III' & dinfmax==dsymp) &
!(case=='Case II'  & dsymp-dinfmin==imax &
dsymp-dinfmax==0 & !is.na(dinfmin)),'Included','Excluded'))
# To know vaccinates --> add vax2 and do the table
# incdat <- incdat %>%
#        select(id,case,dinfmin,dinfmax,dsymp,sex,age,vaccine,vaxstat,vaxtype,vax1,vax2) %>%
#        mutate(dinfmin=if_else(is.na(dinfmin), dsymp-imax, pmax(dinfmin,dsymp-imax))) %>%
#        mutate(dinfmax=if_else(is.na(dinfmax), dsymp, pmax(dinfmax,dsymp-imax))) %>%
#        mutate(elegibility=ifelse(case!='Case IV' &
#                                  !(case=='Case III' & dinfmax==dsymp) &
#                                  !(case=='Case II'  & dsymp-dinfmin==imax &
#                                      dsymp-dinfmax==0 & !is.na(dinfmin)),'Included','Excluded'))
# with(incdat[incdat$elegibility=='Included',],table(vax1,vax2,useNA = 'alw'))
## With 14 --> MDACC
# incdat <- incdat %>%
#        select(id,case,dinfmin,dinfmax,dsymp,sex,age,vaccine,vaxstat,vaxtype,vax1) %>%
#        mutate(dinfmin=if_else(is.na(dinfmin), dsymp-imax, pmax(dinfmin,dsymp-imax))) %>%
#        mutate(dinfmax=if_else(is.na(dinfmax), dsymp, pmax(dinfmax,dsymp-imax))) %>%
#        mutate(elegibility=ifelse(case!='Case IV','Included','Excluded'))
dd0 <- incdat %>% filter(elegibility=='Included')
incdat <- incdat %>%
mutate(age_cat =cut(age,breaks=c(0,40,60,70,100),
include.lowest=TRUE,
labels=c('<=40','41-60','61-70','>=71')),
age_categorized=cut(age,breaks=c(0,17,29,39,49,64,74,84,100),
include.lowest=TRUE,
labels=paste(c('0-17','18-29','30-39',
'40-49','50-64','65-74',
'75-84','>85'),'years')))
class(incdat$vax1) <- "factor"
vaccineTable <- incdat %>%
filter(elegibility=="Included") %>%
tabyl(age_cat,vax1,show_na=FALSE) %>%
adorn_totals( where = c("row", "col") ) %>%
adorn_percentages("row") %>%
adorn_pct_formatting() %>%
adorn_ns( position = "front" ) %>%
adorn_title("combined")
vaccineTable %>%
kable() %>%
kable_styling(bootstrap_options = c("condensed", "striped", "bordered"))
res <- compareGroups(elegibility ~ age + age_categorized + sex + vaccine + vaxstat + vaxtype + vax1, data = incdat)
res_tab <- createTable(res,show.p.overall = FALSE)
export2md(res_tab)
# export2word(res_tab)
# export2latex(res_tab)
# export2pdf(res_tab)
with(incdat,tapply(time_infec_to_survey,elegibility,summary))
# r=t2event
# d=t_exp
t2event <- as.numeric(difftime(dd0$dsymp, dd0$dinfmax, units = "days"))
t_exp <- as.numeric(difftime(dd0$dinfmax, dd0$dinfmin, units = "days"))
##-- Ading 0.5 days artificially to cases with 0: dataset %>% filter(t2event==0 & t_exp==0) o dd0 %>% filter(id %in% c(29,76,161))
#-------------------------------------------------------------------------------
t_exp <- ifelse(t_exp==0 & t2event==0,0.5,t_exp)
# dd0$case[t_exp==0.5] <- 'Case III'
##-- Dataset to fit the models
dataset=data.frame(t2event=t2event, t_exp=t_exp, case=dd0$case,sex = dd0$sex,age = scale(dd0$age),
vaccine=dd0$vaccine, vaxstat=dd0$vaxstat, vaxtype=dd0$vaxtype)
################################################################################
# Patients with exact date
################################################################################
sel <- dd0$case=='Case I'
dataset=data.frame(t2event=t2event, t_exp=t_exp, case=dd0$case,
sex = dd0$sex,age=scale(dd0$age),vaccine=dd0$vaccine,
vaxstat=dd0$vaxstat, vaxtype=dd0$vaxtype)[sel,]
################################################################################
set.seed(12345)
FORM <- c(~1,
~sex,~age,~vaccine,~vaxstat,~vaxtype,
~sex+age,~sex+vaccine,~sex+vaxstat,~sex+vaxtype,~age+vaccine,~age+vaxstat,~age+vaxtype,
~sex+age+vaccine,~sex+age+vaxstat,~sex+age+vaxtype)
RES <- list()
for(i in 1:length(FORM)){
RES[[i]] <- GOR_model(initial_values=NA, t2event=1, t_exp=2, type=3, formula=FORM[[i]], dataset=dataset)
}
options(knitr.kable.NA = '')
##-- Initialize table and array (AIC) with first value
table_est <- as.data.frame(RES[[1]]$table_est[1,,drop=FALSE])
AIC <- RES[[1]]$AIC
##-- Table with estimates and AIC
for(i in 2:length(FORM)){
table_est <- bind_rows(table_est,as.data.frame(RES[[i]]$table_est[1,,drop=FALSE]))
AIC[i] <- RES[[i]]$AIC
}
table_est <- cbind(data.frame(model=as.character(FORM)),
table_est,
data.frame(AIC=AIC))
kable(table_est,digits=3, format='latex',booktabs=TRUE,row.names = FALSE,
col.names = c('Model','$log(\\lambda)$','$log(\\phi)$','$log(\\rho)$',
'$\\beta_{Sex=W}$','$\\beta_{Age}$','$\\beta_{Vax=Yes}$','$\\beta_{Vax=Complete}$',
'$\\beta_{Vax=Adeno}$','$\\beta_{Vax=mRNA}$','AIC'),
escape = FALSE) %>%
kable_styling(latex_options = c('HOLD_position','striped','scale_down'))
##-- Initialize table with first p values
table_pvalues <- as.data.frame(RES[[1]]$table_est[3,,drop=FALSE])
##-- Table with p-values
for(i in 2:length(FORM)){
table_pvalues <- bind_rows(table_pvalues,as.data.frame(RES[[i]]$table_est[3,,drop=FALSE]))
}
table_pvalues <- cbind(data.frame(model=as.character(FORM)),table_pvalues)
kable(table_pvalues,digits=3, format='latex',booktabs=TRUE,row.names = FALSE,
col.names = c('Model','$log(\\lambda)$','$log(\\phi)$','$log(\\rho)$',
'$\\beta_{Sex=W}$','$\\beta_{Age}$','$\\beta_{Vax=Yes}$','$\\beta_{Vax=Complete}$',
'$\\beta_{Vax=Adeno}$','$\\beta_{Vax=mRNA}$'),
escape = FALSE) %>%
kable_styling(latex_options = c('HOLD_position','striped','scale_down'))
res_unadj <- RES[[which(FORM==~1)]]
kable(as.data.frame(res_unadj$table_est),digits=3, format='latex',booktabs=TRUE,
col.names = c('$log(\\lambda)$','$log(\\phi)$','$log(\\rho)$'),
escape = FALSE) %>%
kable_styling(latex_options = c('HOLD_position','striped'))
as.data.frame(res_unadj$table_est)
x <- c(0.05,0.25,0.5,0.75,0.95)
perc <- c()
for(p in x) perc[x==p] <- perc_incubation(par=res_unadj$point_est, p=1-p)
d_out1 <- as.data.frame(matrix(perc,nrow=1))
rownames(d_out1) <- 'Incubation time'
kable(d_out1,digits=1,booktabs=TRUE, format='latex',row.names = TRUE,
col.names = c('5% Perc.','25% Perc.','Median','75% Perc.','95% Perc.')) %>%
kable_styling(latex_options = c('HOLD_position'))
d_out1
RES[[1]]
GOR <- function(initial_values=NA, t_exp, t2event, type, formula, dataset) {
##-- Sample size -------------------------------------------------------------
n <- nrow(dataset)
##-- Design matrix -----------------------------------------------------------
covar <- all.vars(formula[[2]])         # names of covariates
n_covar <- length(covar)                # number of covariates
if(n_covar>0){
dd <- dataset[,covar,drop=FALSE]
z <- as.matrix(model.matrix(formula, data = dd))[,-1,drop=FALSE] # Design matrix
}
##--  Initial values for the parameters --------------------------------------
if(is.na(initial_values[1])){       # if no initial values reported
##-- Model parameters
lambda <- exp(0.01)
phi    <- exp(0.01)
rho    <- exp(-0.01)
##-- Parameters associated to covariates
beta   <- rep(0,ncol(z))
}else{                             # if initial values reported
##-- Model parameters
lambda <- exp(initial_values[1])
phi    <- exp(initial_values[2])
rho    <- exp(initial_values[3])
##-- Parameters associated to covariates
beta   <- initial_values[-c(1:3)]
}
##--  Initial values for the parameters --------------------------------------
if (length(beta)!=0) {
expzb <- as.numeric(exp(z %*% beta))
} else {
expzb <- rep(1, n)
}
##-- Exposure, time to event and case ----------------------------------------
da <- dataset[, t_exp]     # Variable with the length of exposure interval. (0 if exact date)
ra <- dataset[, t2event]   # Variable with elapsed time between the end of exposure and the symptoms onset
case <- dataset[,type]     # Variable indicating exact interval ("Case I") or non-exact ("Case II" or "Case III")
##-- Log-likelihood Case I (Exact date) --------------------------------------
ind_c1 <- case=='Case I'   #
if(sum(ind_c1) > 0) {
r_c1 <- ra[ind_c1]
d_c1 <- da[ind_c1]
expzb_c1 <- expzb[ind_c1]
logL1 <- log(ft(r_c1, lambda, phi, rho, expzb_c1))
} else {
logL1 <- 0
}
##-- Log-likelihood Case I (Interval of dates) -------------------------------
ind_c2 <- case=='Case II' | case=='Case III'
if(sum(ind_c2) > 0) {
r_c2 <- ra[ind_c2]
d_c2 <- da[ind_c2]
expzb_c2 <- expzb[ind_c2]
logL2 <- log(St(r_c2, lambda, phi, rho, expzb_c2) -
St(r_c2 + d_c2, lambda, phi, rho, expzb_c2))
} else {
logL2 <- 0
}
##-- Total Log-likelihood ----------------------------------------------------
logL <- rep(0, n)
if(sum(ind_c1) > 0) logL[ind_c1] <- logL1
if(sum(ind_c2) > 0) logL[ind_c2] <- logL2
##-- return -Log-likelihood (negative to minimize) ---------------------------
return(-sum(logL))
}
set.seed(12345)
FORM <- c(~1,
~sex,~age,~vaccine,~vaxstat,~vaxtype,
~sex+age,~sex+vaccine,~sex+vaxstat,~sex+vaxtype,~age+vaccine,~age+vaxstat,~age+vaxtype,
~sex+age+vaccine,~sex+age+vaxstat,~sex+age+vaxtype)
RES <- list()
for(i in 1:length(FORM)){
RES[[i]] <- GOR_model(initial_values=NA, t2event=1, t_exp=2, type=3, formula=FORM[[i]], dataset=dataset)
}
set.seed(12345)
FORM <- c(~1,
~sex,~age,~vaccine,~vaxstat,~vaxtype,
~sex+age,~sex+vaccine,~sex+vaxstat,~sex+vaxtype,~age+vaccine,~age+vaxstat,~age+vaxtype,
~sex+age+vaccine,~sex+age+vaxstat,~sex+age+vaxtype)
RES <- list()
for(i in 1:length(FORM)){
print(i)
RES[[i]] <- GOR_model(initial_values=NA, t2event=1, t_exp=2, type=3, formula=FORM[[i]], dataset=dataset)
}
RES[[1]]
349.50*12
setwd("C:/Users/jordi/My Drive/CompARE package/CompARE-package/CompARE-package")
setwd("C:/Users/jcortes/My Drive/CompARE package/CompARE-package/CompARE-package")
devtools::document()
devtools::load_all()
devtools::build(pkg = "C:/Users/jcortes/My Drive/CompARE package/CompARE-package/CompARE-package", path = NULL, binary = FALSE, manual = TRUE)
devtools::check_built(path = "C:/Users/jcortes/My Drive/CompARE package/CompARE-package/CompARE-package", cran=TRUE, manual = TRUE)
