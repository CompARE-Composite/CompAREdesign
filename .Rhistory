gg2 <- ggplot(d,aes(x=x,y=y)) + geom_line(color='blue',size=1.2) +
xlab('x') + ylab('f(x)') +
ggtitle(paste0('U(-2.5,2.5 --> CAp(X)=',CAp)) +
theme (axis.title = element_text(face='bold'))
# Laplace --> 3+3
library(ExtDist)
x <- seq(-2.5, 2.5, 0.1)
y <- dLaplace(x,0,sqrt(1/2))
CAp <- 3+3
d <- data.frame(x,y)
gg3 <- ggplot(d,aes(x=x,y=y)) + geom_bar(stat='identity',fill='blue',width=0.2) +
xlab('x') + ylab('P(x)') +
ggtitle(paste0('Laplace(0,0.71) --> CAp(X)=',CAp)) +
theme (axis.title = element_text(face='bold'))
# raised cosine distribution
# https://stackoverflow.com/questions/23259395/what-function-implements-density-quantile-functions-for-the-raised-cosine-dist
drcosd <- function(x,mu, s) { (1/2*s)*(1+cos( pi*(x-mu)/s )) }
CAp <- -0.59 + 3
x <- seq(-2.5, 2.5, 0.1)
y <- drcosd(x,0,sqrt(1/(1/3 - 2/pi^2)))
d <- data.frame(x,y)
gg4 <- ggplot(d,aes(x=x,y=y)) + geom_bar(stat='identity',fill='blue',width=0.2) +
xlab('x') + ylab('P(x)') +
ggtitle(paste0('RaisedCosine(0,x) --> CAp(X)=',CAp)) +
theme (axis.title = element_text(face='bold'))
ggarrange(gg1,gg2,gg3,gg4,nrow=2,ncol=2)
s <- sqrt(1/(1/3 - 2/pi^2))
s
# https://en.wikipedia.org/wiki/Kurtosis#Other_well-known_distributions
# Normal -> Asimetria=0
x <- seq(-2.5, 2.5, 0.1)
y <- dnorm(x)
d <- data.frame(x,y)
gg1 <- ggplot(d,aes(x=x,y=y)) + geom_line(color='blue',size=1.2) +
xlab('x') + ylab('f(x)') +
ggtitle('N(0,1) --> CAp(X)=3')
# Uniform --> CAp= -1.2 + 3
x <- seq(-2.5, 2.5, 0.1)
y <- dunif(x,-2.5,2.5)
CAp <- -1.2 + 3
d <- data.frame(x,y)
gg2 <- ggplot(d,aes(x=x,y=y)) + geom_line(color='blue',size=1.2) +
xlab('x') + ylab('f(x)') +
ggtitle(paste0('U(-2.5,2.5 --> CAp(X)=',CAp)) +
theme (axis.title = element_text(face='bold'))
# Laplace --> 3+3
library(ExtDist)
x <- seq(-2.5, 2.5, 0.1)
y <- dLaplace(x,0,sqrt(1/2))
CAp <- 3+3
d <- data.frame(x,y)
gg3 <- ggplot(d,aes(x=x,y=y)) + geom_line(color='blue',size=1.2)  +
xlab('x') + ylab('P(x)') +
ggtitle(paste0('Laplace(0,0.71) --> CAp(X)=',CAp)) +
theme (axis.title = element_text(face='bold'))
# raised cosine distribution
# https://stackoverflow.com/questions/23259395/what-function-implements-density-quantile-functions-for-the-raised-cosine-dist
drcosd <- function(x,mu, s) { (1/2*s)*(1+cos( pi*(x-mu)/s )) }
CAp <- -0.59 + 3
x <- seq(-2.5, 2.5, 0.1)
s <- sqrt(1/(1/3 - 2/pi^2))
y <- drcosd(x,0,s)
d <- data.frame(x,y)
gg4 <- ggplot(d,aes(x=x,y=y)) + geom_line(color='blue',size=1.2)  +
xlab('x') + ylab('P(x)') +
ggtitle(paste0('RaisedCosine(0,2.77) --> CAp(X)=',CAp)) +
theme (axis.title = element_text(face='bold'))
ggarrange(gg1,gg2,gg3,gg4,nrow=2,ncol=2)
# https://en.wikipedia.org/wiki/Kurtosis#Other_well-known_distributions
# Normal -> Asimetria=0
x <- seq(-2.5, 2.5, 0.1)
y <- dnorm(x)
d <- data.frame(x,y)
gg1 <- ggplot(d,aes(x=x,y=y)) + geom_line(color='blue',size=1.2) +
xlab('x') + ylab('f(x)') + ylim(0,0.75) +
ggtitle('N(0,1) --> CAp(X)=3')
# Uniform --> CAp= -1.2 + 3
x <- seq(-2.5, 2.5, 0.1)
y <- dunif(x,-2.5,2.5)
CAp <- -1.2 + 3
d <- data.frame(x,y)
gg2 <- ggplot(d,aes(x=x,y=y)) + geom_line(color='blue',size=1.2) +
xlab('x') + ylab('f(x)') + ylim(0,0.75) +
ggtitle(paste0('U(-2.5,2.5 --> CAp(X)=',CAp)) +
theme (axis.title = element_text(face='bold'))
# Laplace --> 3+3
library(ExtDist)
x <- seq(-2.5, 2.5, 0.1)
y <- dLaplace(x,0,sqrt(1/2))
CAp <- 3+3
d <- data.frame(x,y)
gg3 <- ggplot(d,aes(x=x,y=y)) + geom_line(color='blue',size=1.2)  +
xlab('x') + ylab('P(x)') + ylim(0,0.75) +
ggtitle(paste0('Laplace(0,0.71) --> CAp(X)=',CAp)) +
theme (axis.title = element_text(face='bold'))
# raised cosine distribution
# https://stackoverflow.com/questions/23259395/what-function-implements-density-quantile-functions-for-the-raised-cosine-dist
drcosd <- function(x,mu, s) { (1/2*s)*(1+cos( pi*(x-mu)/s )) }
CAp <- -0.59 + 3
x <- seq(-2.5, 2.5, 0.1)
s <- sqrt(1/(1/3 - 2/pi^2))
y <- drcosd(x,0,s)
d <- data.frame(x,y)
gg4 <- ggplot(d,aes(x=x,y=y)) + geom_line(color='blue',size=1.2)  +
xlab('x') + ylab('P(x)') + ylim(0,0.75) +
ggtitle(paste0('RaisedCosine(0,2.77) --> CAp(X)=',CAp)) +
theme (axis.title = element_text(face='bold'))
ggarrange(gg1,gg2,gg3,gg4,nrow=2,ncol=2)
# https://en.wikipedia.org/wiki/Kurtosis#Other_well-known_distributions
# Normal -> Asimetria=0
x <- seq(-2.5, 2.5, 0.1)
y <- dnorm(x)
d <- data.frame(x,y)
gg1 <- ggplot(d,aes(x=x,y=y)) + geom_line(color='blue',size=1.2) +
xlab('x') + ylab('f(x)') + ylim(0,0.75) +
ggtitle('N(0,1) --> CAp(X)=3')
# Uniform --> CAp= -1.2 + 3
x <- seq(-2.5, 2.5, 0.1)
y <- dunif(x,-2.5,2.5)
CAp <- -1.2 + 3
d <- data.frame(x,y)
gg2 <- ggplot(d,aes(x=x,y=y)) + geom_line(color='blue',size=1.2) +
xlab('x') + ylab('f(x)') + ylim(0,0.75) +
ggtitle(paste0('U(-2.5,2.5 --> CAp(X)=',CAp)) +
theme (axis.title = element_text(face='bold'))
# Laplace --> 3+3
library(ExtDist)
x <- seq(-2.5, 2.5, 0.1)
y <- dLaplace(x,0,sqrt(1/2))
CAp <- 3+3
d <- data.frame(x,y)
gg3 <- ggplot(d,aes(x=x,y=y)) + geom_line(color='blue',size=1.2)  +
xlab('x') + ylab('P(x)') + ylim(0,0.75) +
ggtitle(paste0('Laplace(0,0.71) --> CAp(X)=',CAp)) +
theme (axis.title = element_text(face='bold'))
# raised cosine distribution
# https://stackoverflow.com/questions/23259395/what-function-implements-density-quantile-functions-for-the-raised-cosine-dist
drcosd <- function(x,mu, s) { (1/2*s)*(1+cos( pi*(x-mu)/s )) }
CAp <- -0.59 + 3
x <- seq(-2.5, 2.5, 0.1)
s <- sqrt(1/(1/3 - 2/pi^2))
y <- drcosd(x,0,s)
d <- data.frame(x,y)
gg4 <- ggplot(d,aes(x=x,y=y)) + geom_line(color='blue',size=1.2)  +
xlab('x') + ylab('P(x)') +
ggtitle(paste0('RaisedCosine(0,2.77) --> CAp(X)=',CAp)) +
theme (axis.title = element_text(face='bold'))
ggarrange(gg1,gg2,gg3,gg4,nrow=2,ncol=2)
s <- sqrt(1/(1/3 - 2/pi^2))
s
drcosd(0,0,2.77)
pi
mu=0
s=2.77
(1/2*s)*(1+cos( pi*(x-mu)/s ))
x=0
(1/2*s)*(1+cos( pi*(x-mu)/s ))
s
(1/2*s)
# https://en.wikipedia.org/wiki/Kurtosis#Other_well-known_distributions
# Normal -> Asimetria=0
x <- seq(-2.5, 2.5, 0.1)
y <- dnorm(x)
d <- data.frame(x,y)
gg1 <- ggplot(d,aes(x=x,y=y)) + geom_line(color='blue',size=1.2) +
xlab('x') + ylab('f(x)') + ylim(0,0.75) +
ggtitle('N(0,1) --> CAp(X)=3')
# Uniform --> CAp= -1.2 + 3
x <- seq(-2.5, 2.5, 0.1)
y <- dunif(x,-2.5,2.5)
CAp <- -1.2 + 3
d <- data.frame(x,y)
gg2 <- ggplot(d,aes(x=x,y=y)) + geom_line(color='blue',size=1.2) +
xlab('x') + ylab('f(x)') + ylim(0,0.75) +
ggtitle(paste0('U(-2.5,2.5 --> CAp(X)=',CAp)) +
theme (axis.title = element_text(face='bold'))
# Laplace --> 3+3
library(ExtDist)
x <- seq(-2.5, 2.5, 0.1)
y <- dLaplace(x,0,sqrt(1/2))
CAp <- 3+3
d <- data.frame(x,y)
gg3 <- ggplot(d,aes(x=x,y=y)) + geom_line(color='blue',size=1.2)  +
xlab('x') + ylab('P(x)') + ylim(0,0.75) +
ggtitle(paste0('Laplace(0,0.71) --> CAp(X)=',CAp)) +
theme (axis.title = element_text(face='bold'))
# raised cosine distribution
# https://stackoverflow.com/questions/23259395/what-function-implements-density-quantile-functions-for-the-raised-cosine-dist
drcosd <- function(x,mu, s) { (1/(2*s)) * (1 + cos(pi*(x-mu)/s)) }
CAp <- -0.59 + 3
x <- seq(-2.5, 2.5, 0.1)
s <- sqrt(1/(1/3 - 2/pi^2))
y <- drcosd(x,0,s)
d <- data.frame(x,y)
gg4 <- ggplot(d,aes(x=x,y=y)) + geom_line(color='blue',size=1.2)  +
xlab('x') + ylab('P(x)') + ylim(0,0.75) +
ggtitle(paste0('RaisedCosine(0,2.77) --> CAp(X)=',CAp)) +
theme (axis.title = element_text(face='bold'))
ggarrange(gg1,gg2,gg3,gg4,nrow=2,ncol=2)
n1 <- 5
A <- 5
B <- 5
x1 <- 0:n1
y1 <- dbinom(x1,n1,n1/(A+B))
y2 <- dhyper(x1,A,B,n1)
d <- data.frame(x=c(x1-0.1,x1+0.1),y=c(y1,y2),dist=rep(c('Binomial','Hipergeomètrica'),each=n1+1))
gg1 <- ggplot(d,aes(x=x,y=y,fill=dist)) +
geom_bar(stat = 'identity',width = 0.2) +
xlab('x') + ylab('P(X=x)') + ggtitle(paste0('X~B(n=',n1,', p=',p1,')')) +
scale_x_continuous(breaks=0:10) + ylim(0,0.25) + theme(legend.title = element_blank())
n1 <- 5
A <- 5
B <- 5
x1 <- 0:n1
y1 <- dbinom(x1,n1,n1/(A+B))
y2 <- dhyper(x1,A,B,n1)
d <- data.frame(x=c(x1-0.1,x1+0.1),y=c(y1,y2),dist=rep(c('Binomial','Hipergeomètrica'),each=n1+1))
gg1 <- ggplot(d,aes(x=x,y=y,fill=dist)) +
geom_bar(stat = 'identity',width = 0.2) +
xlab('x') + ylab('P(X=x)') + ggtitle(paste0('X~HG(5,5,5)')) +
scale_x_continuous(breaks=0:10) + ylim(0,0.25) + theme(legend.title = element_blank())
gg1
y2
n1 <- 5
A <- 5
B <- 5
x1 <- 0:n1
y1 <- dbinom(x1,n1,n1/(A+B))
y2 <- dhyper(x1,A,B,n1)
d <- data.frame(x=c(x1-0.1,x1+0.1),y=c(y1,y2),dist=rep(c('Binomial','Hipergeomètrica'),each=n1+1))
gg1 <- ggplot(d,aes(x=x,y=y,fill=dist)) +
geom_bar(stat = 'identity',width = 0.2) +
xlab('x') + ylab('P(X=x)') + ggtitle(paste0('X~HG(5,5,5)')) +
scale_x_continuous(breaks=0:10) + theme(legend.title = element_blank())
gg1
##-- Binomial 1
n1 <- 5
A <- 5
B <- 5
x1 <- 0:n1
y1 <- dbinom(x1,n1,n1/(A+B))
y2 <- dhyper(x1,A,B,n1)
d <- data.frame(x=c(x1-0.1,x1+0.1),y=c(y1,y2),dist=rep(c('Binomial','Hipergeomètrica'),each=n1+1))
gg1 <- ggplot(d,aes(x=x,y=y,fill=dist)) +
geom_bar(stat = 'identity',width = 0.2) +
xlab('x') + ylab('P(X=x)') + ggtitle(paste0('X~HG(5,5,5)')) +
scale_x_continuous(breaks=0:10) + theme(legend.title = element_blank())
##-- Binomial 2
n1 <- 5
A <- 50
B <- 50
x1 <- 0:n1
y1 <- dbinom(x1,n1,n1/(A+B))
y2 <- dhyper(x1,A,B,n1)
d <- data.frame(x=c(x1-0.1,x1+0.1),y=c(y1,y2),dist=rep(c('Binomial','Hipergeomètrica'),each=n1+1))
gg2 <- ggplot(d,aes(x=x,y=y,fill=dist)) +
geom_bar(stat = 'identity',width = 0.2) +
xlab('x') + ylab('P(X=x)') + ggtitle(paste0('X~HG(50,50,5)')) +
scale_x_continuous(breaks=0:10) + theme(legend.title = element_blank())
ggarrange(gg1,gg2,common.legend = TRUE)
##-- Binomial 1
n1 <- 5
A <- 5
B <- 5
x1 <- 0:n1
y1 <- dbinom(x1,n1,A/(A+B))
y2 <- dhyper(x1,A,B,n1)
d <- data.frame(x=c(x1-0.1,x1+0.1),y=c(y1,y2),dist=rep(c('Binomial','Hipergeomètrica'),each=n1+1))
gg1 <- ggplot(d,aes(x=x,y=y,fill=dist)) +
geom_bar(stat = 'identity',width = 0.2) +
xlab('x') + ylab('P(X=x)') + ggtitle(paste0('X~HG(5,5,5)')) +
scale_x_continuous(breaks=0:10) + theme(legend.title = element_blank())
##-- Binomial 2
n1 <- 5
A <- 50
B <- 50
x1 <- 0:n1
y1 <- dbinom(x1,n1,A/(A+B))
y2 <- dhyper(x1,A,B,n1)
d <- data.frame(x=c(x1-0.1,x1+0.1),y=c(y1,y2),dist=rep(c('Binomial','Hipergeomètrica'),each=n1+1))
gg2 <- ggplot(d,aes(x=x,y=y,fill=dist)) +
geom_bar(stat = 'identity',width = 0.2) +
xlab('x') + ylab('P(X=x)') + ggtitle(paste0('X~HG(50,50,5)')) +
scale_x_continuous(breaks=0:10) + theme(legend.title = element_blank())
ggarrange(gg1,gg2,common.legend = TRUE)
x <- seq(0.1,10,.1)
y1 <- dexp(x,1)
y2 <- dexp(x,.2)
d <- data.frame(Distribution=rep(c('Exp(1)','Exp(0.2)'),each=length(x)),
x=rep(x,2),
y=c(y1,y2))
ggplot(d,aes(x=x,y=y,color=Distribution)) + geom_line(size=1.2) +
ylab('f(x)') + xlab('x') +
theme(legend.title = element_text(face='bold'),
axis.title = element_text(face='bold'))
0.5^2/10000
sqrt(0.5^2/10000)
2*sqrt(0.5^2/10000)
0.534-0.518
0.016/0.005
qnorm(3.2)
pnorm(3.2)
1-pnorm(3.2)
2*(1-pnorm(3.2))
2*(1-pnorm(3.2))*100
n <- 100 # numero de partides de cada tipus
set.seed(12345) # Llavor
##-- Partides de tipus 1 -------------------------------------------------------
# Cada fila és una partida
res_daus <- matrix(sample(1:6,4*n),nrow=n)
##-- Partides de tipus 1 -------------------------------------------------------
# Cada fila és una partida
res_daus <- matrix(sample(1:6,4*n,rep=TRUE),nrow=n)
res_daus
guanyada <- apply(res_daus,1,function(x) 6 %in% x)
guanyada
p1 <- sum(guanyada)/n                                # probabilitat de guanyar
p1
n <- 1000 # numero de partides de cada tipus
set.seed(12345) # Llavor
##-- Partides de tipus 1 -------------------------------------------------------
res_daus <- matrix(sample(1:6,4*n,rep=TRUE),nrow=n)  # Cada fila és una partida
guanyada <- apply(res_daus,1,function(x) 6 %in% x)   # TRUE si hi ha un 6
p1 <- sum(guanyada)/n
dim(as.array(letters))
array(1:3, c(2,4))
array(1:3, c(2,2))
array(1:3, c(2,2,2))
##-- Partides de tipus 2 -------------------------------------------------------
res_daus <- array(sample(1:6,n*24*2,rep=TRUE),c(n,24,2))  # Em creo un array de n files (simulacions), 24 columnes (tirades) i 2 subtaules (daus)
##-- Partides de tipus 2 -------------------------------------------------------
res_daus <- array(sample(1:6,n*24*2,rep=TRUE),c(n,24,2))  # Em creo un array de n files (simulacions), 24 columnes (tirades) i 2 subtaules (daus)
guanyada <- apply(res_daus,c(1,2),function(x) sum(x)==12) # TRUE si doble 6
guanyada
length(guanyada)
dim(guanyada)
##-- Partides de tipus 2 -------------------------------------------------------
res_daus <- array(sample(1:6,n*24*2,rep=TRUE),c(n,24,2))                              # Em creo un array de n files (simulacions), 24 columnes (tirades) i 2 subtaules (daus)
guanyada <- apply(apply(res_daus,c(1,2),function(x) sum(x)==12),1,function(x) any(x)) # TRUE si doble 6
guanyada
p1 <- sum(guanyada)/n                                                                 # probabilitat de guanyar
##-- Partides de tipus 2 -------------------------------------------------------
res_daus <- array(sample(1:6,n*24*2,rep=TRUE),c(n,24,2))                              # Em creo un array de n files (simulacions), 24 columnes (tirades) i 2 subtaules (daus)
guanyada <- apply(apply(res_daus,c(1,2),function(x) sum(x)==12),1,function(x) any(x)) # TRUE si doble 6
p2 <- sum(guanyada)/n                                                                 # probabilitat de guanyar
cat('Proporció de partides guanyades amb 2n joc:',p2,'\n')
n <- 10000 # numero de partides de cada tipus
set.seed(12345) # Llavor per la simulació
##-- Partides de tipus 1 -------------------------------------------------------
res_daus <- matrix(sample(1:6,4*n,rep=TRUE),nrow=n)  # Cada fila és una partida
guanyada <- apply(res_daus,1,function(x) 6 %in% x)   # TRUE si hi ha un 6
p1 <- sum(guanyada)/n                                # probabilitat de guanyar
cat('Proporció de partides guanyades amb 1r joc:',p1,'\n')
##-- Partides de tipus 2 -------------------------------------------------------
res_daus <- array(sample(1:6,n*24*2,rep=TRUE),c(n,24,2))                              # Em creo un array de n files (simulacions), 24 columnes (tirades) i 2 subtaules (daus)
guanyada <- apply(apply(res_daus,c(1,2),function(x) sum(x)==12),1,function(x) any(x)) # TRUE si doble 6
p2 <- sum(guanyada)/n                                                                 # probabilitat de guanyar
cat('Proporció de partides guanyades amb 2n joc:',p2,'\n')
n <- 50000 # numero de partides de cada tipus
set.seed(12345) # Llavor per la simulació
##-- Partides de tipus 1 -------------------------------------------------------
res_daus <- matrix(sample(1:6,4*n,rep=TRUE),nrow=n)  # Cada fila és una partida
guanyada <- apply(res_daus,1,function(x) 6 %in% x)   # TRUE si hi ha un 6
p1 <- sum(guanyada)/n                                # probabilitat de guanyar
cat('Proporció de partides guanyades amb 1r joc:',p1,'\n')
##-- Partides de tipus 2 -------------------------------------------------------
res_daus <- array(sample(1:6,n*24*2,rep=TRUE),c(n,24,2))                              # Em creo un array de n files (simulacions), 24 columnes (tirades) i 2 subtaules (daus)
guanyada <- apply(apply(res_daus,c(1,2),function(x) sum(x)==12),1,function(x) any(x)) # TRUE si doble 6
p2 <- sum(guanyada)/n                                                                 # probabilitat de guanyar
cat('Proporció de partides guanyades amb 2n joc:',p2,'\n')
setwd("C:/Users/jordi/My Drive/CompARE package/CompARE-package/CompARE-package")
setwd("C:/Users/jcortes/My Drive/CompARE package/CompARE-package/CompARE-package")
devtools::document()
devtools::load_all()
# Build & check package
devtools::build(pkg = "C:/Users/jcortes/My Drive/CompARE package/CompARE-package/CompARE-package", path = NULL, binary = FALSE, manual = TRUE)
devtools::check_built(path = "C:/Users/jcortes/My Drive/CompARE package/CompARE-package/CompARE-package", cran=TRUE, manual = TRUE)
# Build manual
devtools::build_manual(pkg = "C:/Users/jcortes/My Drive/CompARE package/CompARE-package/CompARE-package", path = NULL)
ARE_tte(p0_e1=0.1, p0_e2=0.1, HR_e1=0.9, HR_e2=0.8, beta_e1 = 1, beta_e2 = 1,
case=1, copula = "Frank", rho = 0.3, rho_type = "Spearman")
ARE_tte(p0_e1=0.1, p0_e2=0.05, HR_e1=0.6, HR_e2=0.8, beta_e1 = 1, beta_e2 = 1,
case=1, copula = "Frank", rho = 0.3, rho_type = "Spearman")
cite('copula')
citation('copula')
citation('actuar')
install.packages("actuaryr")
citation('actuaryr')
Sys.info()
version
citation('ggplot2')
citation('ggpubr')
citation('rootSolve')
citation('numDeriv')
a <- ARE_tte(p0_e1=p1, p0_e2=p2, HR_e1=HR1, HR_e2=HR2, beta_e1=beta1, beta_e2=beta2,
case = case, rho=rho, copula = copula, rho_type=rho_type,
plot_res = FALSE, plot_store=FALSE)
rm(list=ls())
library(copula)
library(numDeriv)
library(rootSolve)
# library(eha)
library(ggplot2)
library(gridExtra) ##--> Falta incluirla en el paquete!
library(ggpubr)    ##--> Falta incluirla en el paquete!
##-- Parameters
p1=p0_e1=.59#0.2
p2=p0_e2=.74#0.2
HR1=HR_e1=.91#0.9
HR2=HR_e2=.77#0.6
beta1=beta_e1=1#0.5
beta2=beta_e2=2#0.5
case = 3#4
copula='Frank'
rho = 0.5#0.7
rho_type='Spearman'
#########################
# ARE
#########################
##-- Old
# source('C:/Users/jcortes/Dropbox/Sample Size T2E/Simulations/functions.R')
# source('C:/Users/jcortes/Dropbox/Sample Size T2E/Simulations/functions_ARE.R')
#
# ARE(rho0=rho, beta1=beta1, beta2=beta2, HR1=HR1, HR2=HR2, p1=p1, p2=p2, case = case, copula = copula, rhoType=rho_type)
##-- New
setwd('C:/Users/jcortes/My Drive/CompARE package/CompARE-package/CompARE-package/R')
list_files0 <- list.files()
list_files <- list_files0[grepl('\\.R',list_files0)]
for(f in list_files) source(f)
# source('C:/Users/jcortes/Google Drive/CompARE package/CompARE-package/CompARE-package/R/ARE_tte.R')
# source('C:/Users/jcortes/Google Drive/CompARE package/CompARE-package/CompARE-package/R/ARE_tte_array.R')
# source('C:/Users/jcortes/Google Drive/CompARE package/CompARE-package/CompARE-package/R/check_PROBT1UNC_int.R')
#########################
# plot
#########################
plot_tte(p0_e1=p1, p0_e2=p2, HR_e1=HR1, HR_e2=HR2, beta_e1=beta1, beta_e2=beta2,
case = case, rho=rho, copula = copula, rho_type=rho_type,
followup_time=4,
alpha=0.05, power=0.80 ,ss_formula='schoendfeld')
# 14.6
# 3.96
# 4.49
#########################
# Sample size
#########################
a <- samplesize_tte(p0_e1, p0_e2, HR_e1, HR_e2, beta_e1=1, beta_e2=1, case, copula = 'Frank',
rho=0.3, rho_type='Spearman', alpha=0.05, power=0.80 ,ss_formula='schoendfeld',
plot_res = FALSE, plot_store=FALSE)
a$gg_object
#########################
# ARE
#########################
a <- ARE_tte(p0_e1=p1, p0_e2=p2, HR_e1=HR1, HR_e2=HR2, beta_e1=beta1, beta_e2=beta2,
case = case, rho=rho, copula = copula, rho_type=rho_type,
plot_res = FALSE, plot_store=FALSE)
effectsize_tte(p0_e1=p1, p0_e2=p2, HR_e1=HR1, HR_e2=HR2, beta_e1=beta1, beta_e2=beta2,
case = case, rho=rho, copula = copula, rho_type='Spearman',
followup_time=2,
plot_res=TRUE, plot_store=FALSE)
p1
p2
MarginSelec
setwd("C:/Users/jordi/My Drive/CompARE package/CompARE-package/CompARE-package")
setwd("C:/Users/jcortes/My Drive/CompARE package/CompARE-package/CompARE-package")
devtools::document()
devtools::load_all()
effectsize_tte(p0_e1=p1, p0_e2=p2, HR_e1=HR1, HR_e2=HR2, beta_e1=beta1, beta_e2=beta2,
case = case, rho=rho, copula = copula, rho_type='Spearman',
followup_time=2,
plot_res=TRUE, plot_store=FALSE)
remove.packages("CompAREdesign", lib="~/R/win-library/4.0")
setwd("C:/Users/jordi/My Drive/CompARE package/CompARE-package/CompARE-package")
setwd("C:/Users/jcortes/My Drive/CompARE package/CompARE-package/CompARE-package")
devtools::document()
devtools::load_all()
setwd("C:/Users/jordi/My Drive/CompARE package/CompARE-package/CompARE-package")
setwd("C:/Users/jcortes/My Drive/CompARE package/CompARE-package/CompARE-package")
devtools::document()
devtools::load_all()
effectsize_tte(p0_e1=p1, p0_e2=p2, HR_e1=HR1, HR_e2=HR2, beta_e1=beta1, beta_e2=beta2,
case = case, rho=rho, copula = copula, rho_type='Spearman',
followup_time=2,
plot_res=TRUE, plot_store=FALSE)
p1=p0_e1=.59#0.2
p2=p0_e2=.74#0.2
HR1=HR_e1=.91#0.9
HR2=HR_e2=.77#0.6
beta1=beta_e1=1#0.5
beta2=beta_e2=2#0.5
case = 3#4
copula='Frank'
rho = 0.5#0.7
rho_type='Spearman'
effectsize_tte(p0_e1=p1, p0_e2=p2, HR_e1=HR1, HR_e2=HR2, beta_e1=beta1, beta_e2=beta2,
case = case, rho=rho, copula = copula, rho_type='Spearman',
followup_time=2,
plot_res=TRUE, plot_store=FALSE)
effectsize_tte(p0_e1=p1, p0_e2=p2, HR_e1=HR1, HR_e2=HR2, beta_e1=beta1, beta_e2=beta2,
case = case, rho=rho, copula = copula, rho_type='Spearman',
followup_time=2,
plot_res=TRUE, plot_store=FALSE)
effectsize_tte(p0_e1=p1, p0_e2=p2, HR_e1=HR1, HR_e2=HR2, beta_e1=beta1, beta_e2=beta2,
case = case, rho=rho, copula = copula, rho_type='Spearman',
followup_time=4,
plot_res=TRUE, plot_store=FALSE)
#########################
# plot
#########################
plot_tte(p0_e1=p1, p0_e2=p2, HR_e1=HR1, HR_e2=HR2, beta_e1=beta1, beta_e2=beta2,
case = case, rho=rho, copula = copula, rho_type=rho_type,
followup_time=1,
alpha=0.05, power=0.80 ,ss_formula='schoendfeld')
