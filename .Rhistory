# d_wide$treatment_allocation <- relevel(d_wide$treatment_allocation,'Placebo')
# Invert TGDS scale to made it comparable with other scales --> The greater the value, the better the health status
d_wide$scale_TGDS_baseline <- 30 - d_wide$scale_TGDS_baseline
d_wide$scale_TGDS_6months  <- 30 - d_wide$scale_TGDS_6months
d_wide$scale_TGDS_12months <- 30 - d_wide$scale_TGDS_12months
d_wide$scale_ThaiAZQCaregiver_baseline <- 48 - d_wide$scale_ThaiAZQCaregiver_baseline
d_wide$scale_ThaiAZQCaregiver_6months  <- 48 - d_wide$scale_ThaiAZQCaregiver_6months
d_wide$scale_ThaiAZQCaregiver_12months <- 48 - d_wide$scale_ThaiAZQCaregiver_12months
d_wide$scale_ThaiAZQTAQScore_baseline <- 27 - d_wide$scale_ThaiAZQTAQScore_baseline
d_wide$scale_ThaiAZQTAQScore_6months  <- 27 - d_wide$scale_ThaiAZQTAQScore_6months
d_wide$scale_ThaiAZQTAQScore_12months <- 27 - d_wide$scale_ThaiAZQTAQScore_12months
MODELS <- list()
FORMULA <- c()
##-- To save the results
forest_values <- as.data.frame(matrix(nrow=0,ncol=7))                                    # To save treatment_allocation
forest_values_covariates0 <- list(as.data.frame(matrix(nrow=0,ncol=7)))
forest_values_covariates <- rep(forest_values_covariates0,length(COVARIATES_wo_SCALE)+1) # To save other covariates (+1 to include the baseline scale)
for(i in 1:length(CONT_SCALES)){
##-- COVARIATES
scale <- CONT_SCALES[i]
COVARIATES <- c(paste0(scale,'_baseline'),COVARIATES_wo_SCALE) # With scale
COVARIATES_LEVELS <- c(list(baseline_scale=paste0(scale,'_baseline')),COVARIATES_LEVELS_wo_SCALE)
##-- Formulas
VAR_ADJUST <- paste(COVARIATES,collapse=' + ')
form_raw_6 <- as.formula(paste0(scale,'_6months~treatment_allocation'))
form_raw_12 <- as.formula(paste0(scale,'_12months~treatment_allocation'))
form_adj_6 <- as.formula(paste0(scale,'_6months~treatment_allocation +',VAR_ADJUST))
form_adj_12 <- as.formula(paste0(scale,'_12months~treatment_allocation +',VAR_ADJUST))
FORMULA <- c(FORMULA,form_raw_6,form_raw_12,form_adj_6,form_adj_12)
##-- Models
mod_raw_6 <- lm(form_raw_6,d_wide)
mod_raw_12 <- lm(form_raw_12,d_wide)
mod_adj_6 <- lm(form_adj_6,d_wide)
mod_adj_12 <- lm(form_adj_12,d_wide)
MODELS <- c(MODELS,list(mod_raw_6,mod_raw_12,mod_adj_6,mod_adj_12))
##-- 95%CI treatment allocation
forest_values <- rbind(forest_values,
get_mod_info(mod_raw_6, scale,6, 'raw'),
get_mod_info(mod_raw_12,scale,12,'raw'),
get_mod_info(mod_adj_6, scale,6, 'adjusted'),
get_mod_info(mod_adj_12,scale,12,'adjusted'))
##-- 95%CI covariates
for(k in 1:length(COVARIATES)){                # For each covariate
for(j in 1:length(COVARIATES_LEVELS[[k]])){  # For each level of the covariate
forest_values_covariates[[k]] <- rbind(forest_values_covariates[[k]],
get_mod_info(mod_adj_6, scale,6, 'adjusted',coeff=COVARIATES_LEVELS[[k]][j]),
get_mod_info(mod_adj_12,scale,12,'adjusted',coeff=COVARIATES_LEVELS[[k]][j]))
}
}
}
names(forest_values) <- NAMES_FOREST_MATRIX
forest_values$group <- factor(paste0(forest_values$type,' - ',forest_values$time),levels=LEV_FOREST)
forest_values$time <- factor(forest_values$time,levels=c('6 months','12 months'))
forest_values$type <- factor(forest_values$type,levels=c('raw','adjusted'))
forest_values$est <- as.numeric(forest_values$est)
forest_values$low <- as.numeric(forest_values$low)
forest_values$upp <- as.numeric(forest_values$upp)
for(k in 1:length(COVARIATES)){
names(forest_values_covariates[[k]]) <- NAMES_FOREST_MATRIX
forest_values_covariates[[k]]$group <- factor(paste0(forest_values_covariates[[k]]$type,' - ',forest_values_covariates[[k]]$time),levels=LEV_FOREST)
forest_values_covariates[[k]]$time <- factor(forest_values_covariates[[k]]$time,levels=c('6 months','12 months'))
forest_values_covariates[[k]]$type <- factor(forest_values_covariates[[k]]$type,levels=c('raw','adjusted'))
forest_values_covariates[[k]]$est <- as.numeric(forest_values_covariates[[k]]$est)
forest_values_covariates[[k]]$low <- as.numeric(forest_values_covariates[[k]]$low)
forest_values_covariates[[k]]$upp <- as.numeric(forest_values_covariates[[k]]$upp)
# cat(i,k,ncol(forest_values_covariates[[k]]),'\n')
}
421.28/159.3
459-19-4-28
##-- Knitr global options
knitr::opts_chunk$set(echo = FALSE)
##-- Load libraries
library(compareGroups)
library(dplyr)
library(knitr)
library(summarytools)
library(kableExtra)
library(ggplot2)
library(scales)
library(readxl)
##-- Load data
load("../Data/data_1712.Rda")
##-- Remove duplicated --> See file DIVINE ID
id_duplicated <- c(39,92,93,104,109,111,112)
data <- data %>% filter(!record_id %in% id_duplicated)
dim(data)
##-- Load data
load("../Data/data_1712.Rda")
##-- Remove duplicated --> See file DIVINE ID
id_duplicated <- c(39,92,93,104,109,111,112)
dim(data)
##-- Knitr global options
knitr::opts_chunk$set(echo = FALSE)
##-- Load libraries
library(compareGroups)
library(dplyr)
library(knitr)
library(summarytools)
library(kableExtra)
library(ggplot2)
library(scales)
library(readxl)
##-- Load data
load("../Data/data_1712.Rda")
##-- Remove duplicated --> See file DIVINE ID
id_duplicated <- c(39,92,93,104,109,111,112)
data <- data %>% filter(!record_id %in% id_duplicated)
dim(data)
##-- Change to data type
#-------------------------------------------------------------------------------
data$d_visita <- as.Date(data$d_visita)
data$d_nac <- as.Date(data$d_nac)
data$d_infect  <- as.Date(data$d_infect)
data$d_contacto_minimo <- as.Date(data$d_contacto_minimo)
data$d_contacto_maximo <- as.Date(data$d_contacto_maximo)
data$d_infeccion_aprox_minimo <- as.Date(data$d_infeccion_aprox_minimo)
data$d_infeccion_aprox_maximo <- as.Date(data$d_infeccion_aprox_maximo)
data$d_simptomes <- as.Date(data$d_simptomes)
data$d_simptomes_minima  <- as.Date(data$d_simptomes_minima)
data$d_simptomes_maxima <- as.Date(data$d_simptomes_maxima)
data$d_diag_previo  <- as.Date(data$d_diag_previo )
data$d_vacuna_1 <- as.Date(data$d_vacuna_1)
data$d_vacuna_2 <- as.Date(data$d_vacuna_2)
data$d_test <- as.Date(data$d_test)
##-- Change to factor
#-------------------------------------------------------------------------------
data$datos_de_la_infeccin_complete <- as.factor(data$datos_de_la_infeccin_complete)
##-- Created variable vacuna_dosi
#-------------------------------------------------------------------------------
data$vacuna_dosi <- ifelse(!is.na(data$vacuna_1) & (!is.na(data$vacuna_2) | data$vacuna_1=='Janssen'),
'Fully vaccinated',
ifelse(!is.na(data$vacuna_1) & is.na(data$vacuna_2),
'one dose','No vaccinated'))
##-- Variables to remove from descriptive analysis
#-------------------------------------------------------------------------------
VAR_RM_DESC <- c('record_id','sex_espec','curiosidades')
##-- Descriptive analysis
#-------------------------------------------------------------------------------
st_options(footnote = NA)
print(dfSummary(data[,-which(names(data) %in% VAR_RM_DESC)],
varnumbers = FALSE,
labels.col = FALSE,
display.labels = FALSE,
plain.ascii  = FALSE,
style        = 'grid',
graph.magnif = 1,
valid.col    = TRUE), method = "render")
##-- Manually check variable "curiosidades" -->
#    Select patients with (!infection date | !symptoms_date) & curiosidades
#-------------------------------------------------------------------------------
no_infection_data <- with(data,
# No infection date
((is.na(d_infect) & is.na(d_contacto_minimo) & is.na(d_contacto_maximo) &
is.na(d_infeccion_aprox_minimo) & is.na(d_infeccion_aprox_maximo)) |
# No symptoms onset date
(is.na(d_simptomes) & is.na(d_simptomes_minima) & is.na(d_simptomes_maxima))) &
# Having curiosidades
!(is.na(curiosidades) | curiosidades==""))
var_selected <- c('record_id',
'd_infect','d_contacto_minimo','d_contacto_maximo',
'd_infeccion_aprox_minimo','d_infeccion_aprox_maximo',
'd_simptomes','d_simptomes_minima','d_simptomes_maxima',
'curiosidades')
write.table(data[no_infection_data,var_selected],file = '../Data/derived data/check_comments_for_patients_wo_data.csv',
col.names=TRUE,sep=';',row.names = FALSE)
# Warning: Modifications after a manual review of the variable "curiosidades"
#-------------------------------------------------------------------------------
d_imputed_infection_dates0 <- read_excel("../Data/derived data/check_comments_for_patients_wo_data.xlsx")
d_imp <- d_imputed_infection_dates0 %>%
filter(!is.na(d_infect_min_imputed) | !is.na(d_infect_max_imputed)) %>%
select(record_id,curiosidades,d_infect_min_imputed,d_infect_max_imputed)
for (i in 1:nrow(d_imp)){
exact <- with(d_imp,identical(d_infect_min_imputed[i],d_infect_max_imputed[i]))
if(exact){
data$d_infect[data$record_id==d_imp$record_id[i]] <- d_imp$d_infect_min_imputed[i]
cat('Exact imputation:',d_imp$record_id[i],'\n')
}else{
data$d_infeccion_aprox_minimo[data$record_id==d_imp$record_id[i]] <- d_imp$d_infect_min_imputed[i]
data$d_infeccion_aprox_maximo[data$record_id==d_imp$record_id[i]] <- d_imp$d_infect_max_imputed[i]
cat('Approx. imputation:',d_imp$record_id[i],'\n')
}
}
##-- Table of imputed data
#-------------------------------------------------------------------------------
kable(d_imp, format='html',col.names = c('id','comments','d_infect_min','d_infect_max')) %>%
kable_styling()
##-- Patients without any date
#-------------------------------------------------------------------------------
data$no_data <- with(data,is.na(d_infect) &
is.na(d_contacto_minimo) & is.na(d_contacto_maximo) &
is.na(d_infeccion_aprox_minimo) & is.na(d_infeccion_aprox_maximo) &
is.na(d_simptomes) & is.na(d_simptomes_minima) & is.na(d_simptomes_maxima))
##-- Patients without date of symptoms onset
#-------------------------------------------------------------------------------
data$no_symptoms_date <- is.na(data$d_simptomes) & is.na(data$d_simptomes_minima) & is.na(data$d_simptomes_minima)
##-- Exclusions (TRUE/FALSE)
#-------------------------------------------------------------------------------
exc_no_data           <- data$no_data
exc_no_symptoms       <- !data$no_data & data$no_symptoms_date
exc_no_exact_symptoms <- !data$no_data & !data$no_symptoms_date & is.na(data$d_simptomes)
##-- Number of excluded patients by reason
#-------------------------------------------------------------------------------
n_no_data           <- sum(exc_no_data)
n_no_symptoms       <- sum(exc_no_symptoms)
n_no_exact_symptoms <- sum(exc_no_exact_symptoms)
##-- Number of included patients
#-------------------------------------------------------------------------------
n_included <- nrow(data)-n_no_data-n_no_symptoms-n_no_exact_symptoms
dim(data)
##-- Exclude patients without date of symptoms or without exact date of symptoms
#-------------------------------------------------------------------------------
data <- data %>% filter(!exc_no_data & !exc_no_symptoms & !exc_no_exact_symptoms)
dim(data)
# which(c(110,135,15,378,24,27,37,59,71,161,28,32,49,113,136,161,163) %in% id_duplicated)
d_incongruencies <- data.frame(id=c(110,135,15,378,24,27,37,59,71,161,28,32,49,113,136,161,163),
variable_corrected=c(rep('d_simptomes',3),
rep('d_infect',1),
rep('d_contacto_maximo',5),
rep('d_infeccion_aprox_maximo',8)),
old_value=c('2021-07-01','2021-07-14','2021-07-30','2021-07-14',
'2021-06-30','2021-07-06','2021-07-01','2021-07-10','2021-07-04',
'2021-07-30',
'2021-07-03','2021-07-07','2021-07-10','2021-07-18',
'2021-07-23','2021-07-30','2021-07-17'),
new_value=c('2021-07-10','2021-07-24','2021-06-30','2021-10-14',
'2021-06-29','2021-07-01','2021-06-30','2021-07-09','2021-07-01',
'2021-07-24',
'2021-07-02','2021-07-05','2021-07-07','2021-07-16',
'2021-07-21','2021-07-24','2021-07-16'),
reason=c(rep('d_simptomes<d_infeccion_aprox_minimo',2),
'd_simptomes-d_infect=32 days','d_simptomes-d_infect=94 days',
rep('d_contacto_maximo>d_simptomes',5),
rep('d_infeccion_aprox_maximo>d_simptomes',8)))
kable(d_incongruencies) %>% kable_styling()
##-- Dataset with labels in English
#-------------------------------------------------------------------------------
d_incongruencies_eng <- d_incongruencies %>% select(id,variable_corrected,old_value,new_value) %>%
mutate(variable_corrected=case_when(variable_corrected=='d_simptomes' ~ "dsymp",
variable_corrected=='d_infect' ~ "dinfmin/dinfmax",
variable_corrected=='d_contacto_maximo' ~ "dinfmax",
variable_corrected=='d_infeccion_aprox_maximo' ~ "dinfmax",
TRUE ~ variable_corrected))
write.table(d_incongruencies_eng,'../Data/derived data/corrections.csv',row.names = FALSE, quote = FALSE)
427 + 19 + 4 + 28
shiny::runApp('C:/Users/jcortes/Dropbox/DIVINE/APP/COVID19')
406+21+28+4+19
64/406
178/406
172/406
6/406
164/406
164-406
(58*242+61.1*164)/406
98/(98+52)
98/(98+144)
52/(52+112)
150/(150+256)
117/(117+125)
73/(73+91)
190/(190+216)
29/(29+96)
28/(28+63)
57/(57+159)
library(shiny)
library(DT)
ui <- fluidPage(
dataTableOutput("myTable")
)
server <- function(input, output, session) {
#The proxy to update the DT
proxy <- dataTableProxy('myTable')
#The initial data for the checkboxes
checkboxes = data.frame(
Name = c(NA, as.character(icon("ok", lib = "glyphicon"))),
Time = c(NA, as.character(icon("ok", lib = "glyphicon"))),
Budget = c(as.character(icon("ok", lib = "glyphicon")), NA),
row.names = paste("Project", 1:2)
)
#The reactive version of the data
tableData = reactiveValues(checkboxes = checkboxes)
#Update the table when clicked
observeEvent(req(input$myTable_cells_selected), {
tableData$checkboxes[input$myTable_cells_selected] =
ifelse(is.na(tableData$checkboxes[input$myTable_cells_selected]),
as.character(icon("ok", lib = "glyphicon")), NA)
#Send proxy (no need to refresh whole table)
replaceData(proxy, tableData$checkboxes)
})
#The "checkbox" table
output$myTable = renderDataTable({
checkboxes
},
#These are options to make the table look like checkboxes
selection = list(mode = "single", target = 'cell'),
options = list(
columnDefs = list(list(className = 'dt-center', targets = "_all")),
dom = "t", ordering = F
),
escape = F)
}
shinyApp(ui, server)
install.packages("shinysurveys")
library(shinysurveys)
# For use as a normal Shiny input:
if (interactive()) {
library(shiny)
ui <- fluidPage(
radioMatrixInput("matInput",
responseItems = c("Love sushi?", "Love chocolate?"),
choices = c("Disagree", "Neutral", "Agree"))
)
server <- function(input, output, session) {
observe({
print(input$matInput)
})
}
shinyApp(ui, server)
}
# For use in {shinysurveys}
if (interactive()) {
df <- data.frame(
question = c(rep("I love sushi.", 3), rep("I love chocolate.",3),
"What's your favorite food?", rep("Goat cheese is the GOAT.", 5),
rep("Yogurt and berries are a great snack.",5),
rep("SunButter® is a fantastic alternative to peanut butter.", 5)),
option = c(rep(c("Disagree", "Neutral", "Agree"), 2), "text",
rep(c("Strongly Disagree", "Disagree", "Neutral", "Agree", "Strongly Agree"), 3)),
input_type = c(rep("matrix", 6), "text", rep("matrix", 15)),
# For matrix questions, the IDs should be the same for each question
# but different for each matrix input unit
input_id = c(rep("matId", 6), "favorite_food", rep("matId2", 15)),
dependence = NA,
dependence_value = NA,
required = FALSE
)
library(shiny)
ui <- fluidPage(
surveyOutput(df)
)
server <- function(input, output, session) {
renderSurvey()
observe({
print(input$matId)
print(input$favorite_food)
print(input$matId2)
})
}
shinyApp(ui, server)
}
require(devtools)
install_github('ShinyHelper', 'jayemerson')
library(ShinyHelper)
demo("EPI_2012")
require(devtools)
install_github('ShinyHelper', 'jayemerson')
install_github('jayemerson/ShinyHelper')
library(ShinyHelper)
demo("EPI_2012")
runApp("EPI_2012")
shinySkeleton("toyapplication")
headerPanelAdd("My Toy Application")
sliderInputAdd("n", "Choose the sample size:", 100, 500, 100)
plotOutputAdd("myplot", plotcode =
'
hist(rnorm(input$n), main="Histogram from rnorm()")
abline(v=0, lwd=3, col="red")
')
createApp("toyapplication")
runApp("toyapplication")
1.163 + c(-1,1)*qnorm(0.975)*0.109
0.737 + c(-1,1)*qnorm(0.975)*0.138
-0.719 + c(-1,1)*qnorm(0.975)*0.461
0.717 + c(-1,1)*qnorm(0.975)*0.375
-0.100 + c(-1,1)*qnorm(0.975)*0.236
rm(list=ls())
############################################################
# Load packages
############################################################
library(scatterplot3d)
library(flexclust)
library(NbClust)        # NbClust
library(cluster)
library(factoextra)     # fviz_***
library(kernlab)        # kkmeans
library(clValid)        # clValid
library(cluster)        # pam
rm(list=ls())
############################################################
# Load packages
############################################################
library(scatterplot3d)
library(flexclust)
library(NbClust)        # NbClust
library(cluster)
library(factoextra)     # fviz_***
library(kernlab)        # kkmeans
library(clValid)        # clValid
library(cluster)        # pam
data (iris)                                # Load data
View(iris)                                 # View data
iris2 <- iris[,1:4]                        # Remove response variable (unsupervised)
windows()
pairs(iris2)                               # Plots 2 by 2
heatmap(as.matrix(iris2))                  # Heatmap w/o scaling
heatmap(as.matrix(scale(iris2)))           # Scaled heatmap
km0 <- kmeans(iris2,centers=3)
km0$cluster                         # Allocation to clusters
km0$centers                         # Coordenates of the gravity centers
km0$totss                           # Total Inertia
km0$withinss                        # Intra-cluster Inertia for each cluster
km0$tot.withinss                    # Intra-cluster Inertia (global)
km0$betweenss                       # Between-cluster Inertia
km0$size                            # Size of the clusters
km0$iter                            # Number of iterations to converge
shiny::runApp('C:/Users/jcortes/Desktop/MSMpred')
runApp('C:/Users/jcortes/Desktop/MSMpred')
rm(list=ls())
library(copula)
library(numDeriv)
library(rootSolve)
library(ggplot2)
library(gridExtra) ##--> Falta incluirla en el paquete!
library(ggpubr)    ##--> Falta incluirla en el paquete!
##-- Parameters
p1=p0_e1=.59#0.2
p2=p0_e2=.74#0.2
HR1=HR_e1=.91#0.9
HR2=HR_e2=.77#0.6
beta1=beta_e1=1#0.5
beta2=beta_e2=2#0.5
case = 3#4
copula='Frank'
rho = 0.5#0.7
rho_type='Spearman'
first(1:5)
library(dplyr)
first(1:5)
first(2:8)
ARE_tte(p0_e1=p1, p0_e2=p2, HR_e1=HR1, HR_e2=HR2, beta_e1=beta1, beta_e2=beta2,
case = case, rho=rho, copula = copula, rho_type=rho_type,
plot_res = FALSE, plot_store=FALSE)
setwd("C:/Users/jordi/My Drive/CompARE package/CompARE-package/CompARE-package")
setwd("C:/Users/jcortes/My Drive/CompARE package/CompARE-package/CompARE-package")
devtools::document()
devtools::load_all()
p1=p0_e1=.59#0.2
p2=p0_e2=.74#0.2
HR1=HR_e1=.91#0.9
HR2=HR_e2=.77#0.6
beta1=beta_e1=1#0.5
beta2=beta_e2=2#0.5
case = 3#4
copula='Frank'
rho = 0.5#0.7
rho_type='Spearman'
effectsize_tte(p0_e1=p1, p0_e2=p2, HR_e1=HR1, HR_e2=HR2, beta_e1=beta1, beta_e2=beta2,
case = case, rho=rho, copula = copula, rho_type='Spearman',
followup_time=4,
plot_res=TRUE, plot_store=FALSE)
samplesize_tte(p0_e1, p0_e2, HR_e1, HR_e2, beta_e1=1, beta_e2=1, case, copula = 'Frank',
rho=0.3, rho_type='Spearman', alpha=0.05, power=0.80 ,ss_formula='schoendfeld',
plot_res = FALSE, plot_store=FALSE)
samplesize_tte(p0_e1, p0_e2, HR_e1, HR_e2, beta_e1=1, beta_e2=1, case, copula = 'Frank',
rho=0.3, rho_type='Spearman', alpha=0.05, power=0.80 ,ss_formula='schoenfeld',
plot_res = FALSE, plot_store=FALSE)
samplesize_tte(p0_e1, p0_e2, HR_e1, HR_e2, beta_e1=1, beta_e2=1, case, copula = 'Frank',
rho, rho_type='Spearman', alpha=0.05, power=0.80 ,ss_formula='schoenfeld',
plot_res = FALSE, plot_store=FALSE)
samplesize_tte(p0_e1, p0_e2, HR_e1, HR_e2, beta_e1, beta_e2, case, copula = 'Frank',
rho, rho_type='Spearman', alpha=0.05, power=0.80 ,ss_formula='schoenfeld',
plot_res = FALSE, plot_store=FALSE)
d <- simula_tte(p0_e1, p0_e2, HR_e1, HR_e2, beta_e1=1, beta_e2=1,
case, copula = 'Frank', rho=0.3, rho_type='Spearman',
followup_time=1,
sample_size=100000)
#########################
# Simulation
#########################
set.seed(12345)
d <- simula_tte(p0_e1, p0_e2, HR_e1, HR_e2, beta_e1=1, beta_e2=1,
case, copula = 'Frank', rho=0.3, rho_type='Spearman',
followup_time=1,
sample_size=100000)
#########################
# Simulation
#########################
set.seed(12345)
d <- simula_tte(p0_e1, p0_e2, HR_e1, HR_e2, beta_e1=1, beta_e2=1,
case, copula = 'Frank', rho=0.3, rho_type='Spearman',
followup_time=1,
sample_size=1000)
a <- effectsize_tte(p0_e1=p1, p0_e2=p2, HR_e1=HR1, HR_e2=HR2, beta_e1=beta1, beta_e2=beta2,
case = case, rho=rho, copula = copula, rho_type='Spearman',
followup_time=4,
plot_res=TRUE, plot_store=FALSE)
coxph(Surv(time_e1,status_e1)~treated,d) # HR_e1 ~ 0.91
# Check simula results
library(survival)
a <- effectsize_tte(p0_e1=p1, p0_e2=p2, HR_e1=HR1, HR_e2=HR2, beta_e1=beta1, beta_e2=beta2,
case = case, rho=rho, copula = copula, rho_type='Spearman',
followup_time=4,
plot_res=TRUE, plot_store=FALSE)
coxph(Surv(time_e1,status_e1)~treated,d) # HR_e1 ~ 0.91
coxph(Surv(time_e2,status_e2)~treated,d) # HR_e2 ~ 0.77
coxph(Surv(time_ce,status_ce)~treated,d) # HR_ce ~ gAHR
set.seed(12345)
rand_data <- simula_tte(p0_e1, p0_e2, HR_e1, HR_e2, beta_e1=1, beta_e2=1,
case, copula = 'Frank', rho=0.3, rho_type='Spearman',
followup_time=1,
sample_size=1000)
head(rand_data)
tail(rand_data)
